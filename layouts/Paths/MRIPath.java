package layouts.Paths;

import interfaces.Path;

import java.awt.*;

//import org.jshadow.interfaces.Path;

/**
 * Path of the First Custom Game.
 *
 * @author JoelS
 * @version 2
 */
public class MRIPath implements Path {
    private int[][] AX;
    private int[][] AY;
    private int tam;
    public MRIPath(int tam, Color[] colores){
        this.tam = tam;
        addAX(AX, colores);
        addAY(AY, colores);
        getAX();
        getAY();
    }
    
    /**
     * Returns possible X positions of the pawns.
     * @return Possible X positions.
     */
    public int[][] getAX() {
        return AX;
    }

    private void addAX(int[][] x, Color[] colores){
        int i = 0;
        int pos = 0; 
        AX = new int[4][75];
        
        while(pos < tam){
            if(colores[pos] == Color.BLUE){
                int[] a1 =  { 1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,18,17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8 };
                while(i < a1.length){
                    AX[pos][i] = a1[i];
                    i++;
                }
                i = 0;
            }
            if(colores[pos] == Color.GREEN){
                int[] a2 = { 10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,18,17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9 };
                while(i < a2.length){
                    AX[pos][i] = a2[i];
                    i++;
                }
                i = 0;
            }
            if(colores[pos] == Color.RED){
                int[] a3 = { 17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,17,16,15,14,13,12,11,10 };
                while(i < a3.length){
                    AX[pos][i] = a3[i];
                    i++;
                }
                i = 0;
            }
            if(colores[pos] == Color.YELLOW){
                int[] a4 = { 8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,18,17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9 };
                while(i < a4.length){
                    AX[pos][i] = a4[i];
                    i++;
                }
                i = 0;
            }
            pos++;
        }
    }
    
    /**
     * Returns possible Y positions of the pawns.
     * @return Possible Y positions.
     */
    public int[][] getAY() {
        return AY;
    }

    private void addAY(int[][] y, Color[] colores){
        int pos = 0;
        int i = 0;
        AY = new int[4][75];
        while(pos < tam){
            if(colores[pos] == Color.BLUE){
                int[] a1 =  { 8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,18,17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9 };
                while(i < a1.length){
                    AY[pos][i] = a1[i];
                    i++;
                }
                i = 0;
            }
            if(colores[pos] == Color.GREEN){
                int[] a2 = { 1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,18,17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8 };
                while(i < a2.length){
                    AY[pos][i] = a2[i];
                    i++;
                }
                i = 0;
            }
            if(colores[pos] == Color.RED){
                int[] a3 =  { 10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,18,17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9 };
                while(i < a3.length){
                    AY[pos][i] = a3[i];
                    i++;
                }
                i = 0;
            }
            if(colores[pos] == Color.YELLOW){
                int[] a4 = { 17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,17,16,15,14,13,12,11,10 };
                while(i < a4.length){
                    AY[pos][i] = a4[i];
                    i++;
                }
                i = 0;
            }
            pos++;
        }
    }
    
    /**
     * Returns optional X positions of the pawns.
     * @return Empty arrays.
     */
    public int[][] getOptionaColorlAX() {

        return new int[][]{
                { 1,2,3,4,4,4,4,4,5,6,7,8,8,8,8,8,9,10,10,10,10,10,11,12,13,14,14,14,14,14,15,16,17,18,18,18,17,16,15,14,14,14,14,14,13,12,11,10,10,10,10,10,9,8,8,8,8,8,7,6,5,4,4,4,4,4,3,2,1,0,0,1,2,3,4,5,6,7,8 },
                { 10,10,10,10,11,12,13,14,14,14,14,14,15,16,17,18,18,18,17,16,15,14,14,14,14,14,14,13,12,11,10,10,10,10,10,9,8,8,8,8,8,7,6,5,4,4,4,4,4,3,2,1,0,0,0,1,2,3,4,4,4,4,4,5,6,7,8,8,8,8,8,9,9,9,9,9,9,9,9,9 },
                { 17,16,15,14,14,14,14,14,13,12,11,10,10,10,10,10,9,8,8,8,8,8,7,6,5,4,4,4,4,4,3,2,1,0,0,0,1,2,3,4,4,4,4,4,5,6,7,8,8,8,8,8,9,10,10,10,10,10,11,12,13,14,14,14,14,14,15,16,17,18,18,17,16,15,14,13,12,11,10 },
                { 8,8,8,8,7,6,5,4,4,4,4,4,3,2,1,0,0,0,1,2,3,4,4,4,4,4,5,6,7,8,8,8,8,8,9,10,10,10,10,10,11,12,13,14,14,14,14,14,15,16,17,18,18,18,17,16,15,14,14,14,14,14,13,12,11,10,10,10,10,10,9,9,9,9,9,9,9,9,9 }
        };
    }

    /**
     * Returns optional Y positions of the pawns.
     * @return Empty arrays.
     */
    public int[][] getOptionaColorlAY() {
        return new int[][]{
                { 8,8,8,8,7,6,5,4,4,4,4,4,3,2,1,0,0,0,1,2,3,4,4,4,4,4,5,6,7,8,8,8,8,8,9,10,10,10,10,10,11,12,13,14,14,14,14,14,15,16,17,18,18,18,17,16,15,14,14,14,14,14,13,12,11,10,10,10,10,10,9,9,9,9,9,9,9,9,9 },
                { 1,2,3,4,4,4,4,4,5,6,7,8,8,8,8,8,9,10,10,10,10,10,11,12,13,14,14,14,14,14,15,16,17,18,18,18,17,16,15,14,14,14,14,14,13,12,11,10,10,10,10,10,9,8,8,8,8,8,7,6,5,4,4,4,4,4,3,2,1,0,0,1,2,3,4,5,6,7,8 },
                { 10,10,10,10,11,12,13,14,14,14,14,14,15,16,17,18,18,18,17,16,15,14,14,14,14,14,13,12,11,10,10,10,10,10,9,8,8,8,8,8,7,6,5,4,4,4,4,4,3,2,1,0,0,0,1,2,3,4,4,4,4,4,5,6,7,8,8,8,8,8,9,9,9,9,9,9,9,9,9 },
                { 17,16,15,14,14,14,14,14,13,12,11,10,10,10,10,10,9,8,8,8,8,8,7,6,5,4,4,4,4,4,3,2,1,0,0,0,1,2,3,4,4,4,4,4,5,6,7,8,8,8,8,8,9,10,10,10,10,10,11,12,13,14,14,14,14,14,15,16,17,18,18,17,16,15,14,13,12,11,10 }
        };
    }

    public int[][] getOptionalAX() {

        return new int[][]{
                { 1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,18,17,16,15,14,14,14,14,14,13,12,11,10,10,10,10,10,9,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8 },
                { 10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,18,17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,8,8,8,8,8,7,6,5,4,4,4,4,4,3,2,1,0,0,0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9 },
                { 17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,0,1,2,3,4,4,4,4,4,5,6,7,8,8,8,8,8,9,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,17,16,15,14,13,12,11,10 },
                { 8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,11,12,13,14,14,14,14,14,15,16,17,18,18,18,17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9 }
        };
    }
    public int[][] getOptionalAY() {
        return new int[][]{
                { 8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,11,12,13,14,14,14,14,14,15,16,17,18,18,18,17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9 },
                { 1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,18,17,16,15,14,14,14,14,14,13,12,11,10,10,10,10,10,9,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8 },
                { 10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,18,17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,8,8,8,8,8,7,6,5,4,4,4,4,4,3,2,1,0,0,0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9 },
                { 17,16,15,14,13,12,11,10,10,10,10,10,10,10,10,9,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1,0,0,0,1,2,3,4,4,4,4,4,5,6,7,8,8,8,8,8,9,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,18,17,16,15,14,13,12,11,10 }
        };
    }
}
